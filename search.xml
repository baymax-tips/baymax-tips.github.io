<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Docker 中运行 OpenWrt 旁路网关</title>
      <link href="/2020/05/09/zai-docker-zhong-yun-xing-openwrt-pang-lu-wang-guan/"/>
      <url>/2020/05/09/zai-docker-zhong-yun-xing-openwrt-pang-lu-wang-guan/</url>
      
        <content type="html"><![CDATA[<p>在接下来的文章中，我们将在 <code>Docker</code> 容器中运行 <code>OpenWrt</code>，并通过设置，让 <code>Docker</code> 容器中的 <code>OpenWrt</code> 网关接管路由器自身的网关，减轻路由器的负担，同时，由于网关被 <code>OpenWrt</code> 接管，所以 <code>OpenWrt</code> 中的大部分应用都是可用的，比如酸酸乳，V2ray，去广告等。做个不恰当的比喻， <code>OpenWrt</code> 网关接管路由器自身的网关后，你可以理解为路由器是 <code>OpenWrt</code> 的一块外置网卡。</p><h2 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h2><h3 id="1-OpenWrt"><a href="#1-OpenWrt" class="headerlink" title="1. OpenWrt"></a>1. OpenWrt</h3><blockquote><p><strong>OpenWrt</strong>：是一个高度模块化、高度自动化的嵌入式的Linux发行版，她拥有强大的网络组件和扩展性，常常被用于工控设备、智能家居、路由器等设备中。它还提供了上百个已编译好的软件，而且数量还在不断增加。</p></blockquote><p><code>OpenWrt</code>使用框架来构建应用程序，不需要构建一个完整的固件，对于用户来说，将会拥有完全定制的玩法。OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><h3 id="2-旁路网关"><a href="#2-旁路网关" class="headerlink" title="2. 旁路网关"></a>2. 旁路网关</h3><p>那么，什么是旁路网关(旁路由)呢？</p><blockquote><p><strong>所谓的旁路网关</strong>：就是在路由器之外的其他硬件设备上搭建一个网关环境，把路由器肩负的网关重任交给其他更适合的设备来做，同时，旁路网关处理完的结果会返回给主路由器，由主路由器继续进行转发处理。</p></blockquote><p>普通的路由器往往集无线信号转发、网关、DNS 服务等角色为一身，其中的“网关”角色负责路由器内部数据与外部网络的交换处理。但因为一般家用的路由器硬件性能很有限，在运行一些比较吃资源的应用（如酸酸乳、去广告等）时，几乎会占满所有硬件资源，导致路由器网络/系统不稳定等诸多问题。<br/><br>既然路由器的硬件性能有限，那可不可以把网关的重任交给硬件性能更好的设备去做，让路由器安安心心地做好数据交换的工作哪？<br/><br>当然可以了，我们可以增加一个<code>旁路网关</code>，让它预先处理数据，将复杂的功能完成后，再交给主路由进行转发和后续的工作。</p><p>这样，每个角色各司其职，路由器肩上的任务轻了，即使是油管 4K 也能轻松跑满网速了，而<code>旁路网关</code>也能提供更多的功能。由此资源的充分利用，一举两得。</p><h3 id="3-Docker"><a href="#3-Docker" class="headerlink" title="3. Docker"></a>3. Docker</h3><blockquote><p><strong>Docker</strong> 是一个开源，轻量级的应用容器引擎，基于GO语言开发，用于创建、管理和编排容器。与VMware 虚拟机相比，Docker 使用容器承载应用程序，而不使用操作系统，所以它的开销很少，性能很高。</p></blockquote><h2 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h2><h3 id="1-获取自动安装脚本"><a href="#1-获取自动安装脚本" class="headerlink" title="1. 获取自动安装脚本"></a>1. 获取自动安装脚本</h3><blockquote><p>以 <code>阿里云镜像</code>安装脚本内容</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装命令</span>curl -fsSL https://get.docker.com -o get-docker.shsh get-docker.sh --mirror Aliyun</code></pre><p>安装过程如下</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Executing docker install script, commit: 1b02882d63b9cfc484ad6b0180171c679cfe0f3a</span>+ sh -c <span class="token function">apt-get</span> update -qq <span class="token operator">></span>/dev/null+ sh -c DEBIAN_FRONTEND<span class="token operator">=</span>noninteractive <span class="token function">apt-get</span> <span class="token function">install</span> -y -qq apt-transport-https ca-certificates curl <span class="token operator">></span>/dev/null+ sh -c curl -fsSL <span class="token string">"https://download.docker.com/linux/debian/gpg"</span> <span class="token operator">|</span> apt-key add -qq - <span class="token operator">></span>/dev/nullWarning: apt-key output should not be parsed <span class="token punctuation">(</span>stdout is not a terminal<span class="token punctuation">)</span>+ sh -c <span class="token keyword">echo</span> <span class="token string">"deb [arch=arm64] https://download.docker.com/linux/debian stretch stable"</span> <span class="token operator">></span> /etc/apt/sources.list.d/docker.list+ sh -c <span class="token function">apt-get</span> update -qq <span class="token operator">></span>/dev/null+ <span class="token punctuation">[</span> -n  <span class="token punctuation">]</span>+ sh -c <span class="token function">apt-get</span> <span class="token function">install</span> -y -qq --no-install-recommends docker-ce <span class="token operator">></span>/dev/null+ sh -c docker versionClient: Docker Engine - Community Version:           19.03.8 API version:       1.40 Go version:        go1.12.17 Git commit:        afacb8b Built:             Wed Mar 11 01:27:00 2020 OS/Arch:           linux/arm64 Experimental:      <span class="token boolean">false</span>Server: Docker Engine - Community Engine:  Version:          19.03.8  API version:      1.40 <span class="token punctuation">(</span>minimum version 1.12<span class="token punctuation">)</span>  Go version:       go1.12.17  Git commit:       afacb8b  Built:            Wed Mar 11 01:25:31 2020  OS/Arch:          linux/arm64  Experimental:     <span class="token boolean">false</span> containerd:  Version:          1.2.13  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429 runc:  Version:          1.0.0-rc10  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd docker-init:  Version:          0.18.0  GitCommit:        fec3683If you would like to use Docker as a non-root user, you should now consideradding your user to the <span class="token string">"docker"</span> group with something like:  <span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker your-userRemember that you will have to log out and back <span class="token keyword">in</span> <span class="token keyword">for</span> this to take effect<span class="token operator">!</span>WARNING: Adding a user to the <span class="token string">"docker"</span> group will grant the ability to run         containers <span class="token function">which</span> can be used to obtain root privileges on the         docker host.         Refer to https://docs.docker.com/engine/security/security/<span class="token comment" spellcheck="true">#docker-daemon-attack-surface</span>         <span class="token keyword">for</span> <span class="token function">more</span> information.</code></pre><h3 id="2-开启网卡的混杂模式"><a href="#2-开启网卡的混杂模式" class="headerlink" title="2. 开启网卡的混杂模式"></a>2. 开启网卡的混杂模式</h3><blockquote><p>开启网卡的混杂模式（这样是为了目前这个阶段能正常安装并配置，要永久开启需修改配置文件，稍后详述）</p></blockquote><pre class=" language-bash"><code class="language-bash">ip <span class="token function">link</span> <span class="token keyword">set</span> eth0 promisc on</code></pre><h3 id="3-下载-OpenWrt-镜像"><a href="#3-下载-OpenWrt-镜像" class="headerlink" title="3. 下载 OpenWrt 镜像"></a>3. 下载 OpenWrt 镜像</h3><blockquote><p>在终端界面执行以下命令，下载OpenWrt的docker 镜像文件</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 镜像下载命令</span>docker pull buddyfly/openwrt-aarch64</code></pre><p>镜像下载过程如下</p><pre class=" language-bash"><code class="language-bash">Using default tag: latestlatest: Pulling from buddyfly/openwrt-aarch64aef47d0acf8a: Pull completeDigest: sha256:d3a3f4f9aaac4169d3b16c1f796b5d379c6234b997cb440daee80ef3ad1aba05Status: Downloaded newer image <span class="token keyword">for</span> buddyfly/openwrt-aarch64:latestdocker.io/buddyfly/openwrt-aarch64:latest</code></pre><h3 id="4-创建-Docker-虚拟网络"><a href="#4-创建-Docker-虚拟网络" class="headerlink" title="4. 创建 Docker 虚拟网络"></a>4. 创建 Docker 虚拟网络</h3><blockquote><p>虚拟网络名称为<code>macnet</code>，驱动为<code>macvlan</code>模式，将 <code>subnet 10.10.10.0</code>修改为你自己主路由的网段，<code>geteway 10.10.10.1</code>修改为你自己的主路由网关】</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建虚拟网络</span>docker network create -d macvlan --subnet<span class="token operator">=</span>10.10.10.0/24 --gateway<span class="token operator">=</span>10.10.10.1 -o parent<span class="token operator">=</span>eth0 macnet</code></pre><h3 id="5-启动-OpenWrt-容器"><a href="#5-启动-OpenWrt-容器" class="headerlink" title="5. 启动 OpenWrt 容器"></a>5. 启动 OpenWrt 容器</h3><blockquote><p>启动 OpenWrt 容器</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启容器</span>docker run --restart always -d --network macnet --privileged buddyfly/openwrt-aarch64:latest</code></pre><h3 id="6-查看运行中的-OpenWrt-容器"><a href="#6-查看运行中的-OpenWrt-容器" class="headerlink" title="6. 查看运行中的 OpenWrt 容器"></a>6. 查看运行中的 OpenWrt 容器</h3><blockquote><p>查看运行中的容器</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看运行中的容器</span>docker <span class="token function">ps</span> -a</code></pre><p>运行结果如下</p><pre><code>root@aml4:~# docker ps -aCONTAINER ID        IMAGE                             COMMAND             CREATED             STATUS              PORTS               NAMESf76303c1b9f0        buddyfly/openwrt-aarch64:latest   &quot;/sbin/init&quot;        43 seconds ago      Up 40 seconds                           affectionate_liskovroot@aml4:~#</code></pre><h3 id="7-修改OpenWrt容器的IP地址"><a href="#7-修改OpenWrt容器的IP地址" class="headerlink" title="7. 修改OpenWrt容器的IP地址"></a>7. 修改OpenWrt容器的IP地址</h3><blockquote><p>进入openwrt容器修改network设置</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入容器命令行</span>docker <span class="token function">exec</span> -it f76303c1b9f0 /bin/bash</code></pre><p>进入容器命令行结果如下</p><pre><code>root@aml4:~# docker exec -it f763 /bin/bashbash-4.4#</code></pre><blockquote><p>编辑网络配置文件</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改网络配置</span><span class="token function">vi</span> /etc/config/network</code></pre><p>修改文件如下 将<code>option ipaddr 192.168.1.1</code> 改为你想作为旁路网关的空闲地址。我的网段为<code>10.10.10.X</code>,共享地址为<code>10.10.10.254</code></p><pre><code>config interface &#39;loopback&#39;        option ifname &#39;lo&#39;        option proto &#39;static&#39;        option ipaddr &#39;127.0.0.1&#39;        option netmask &#39;255.0.0.0&#39;config globals &#39;globals&#39;        option ula_prefix &#39;fd00:6e95:e381::/48&#39;config interface &#39;lan&#39;        option type &#39;bridge&#39;        option ifname &#39;eth0&#39;        option proto &#39;static&#39;        option ipaddr &#39;10.10.10.254&#39;        option netmask &#39;255.255.255.0&#39;        option ip6assign &#39;60&#39;</code></pre><blockquote><p>重启网络服务</p></blockquote><pre class=" language-bash"><code class="language-bash">/etc/init.d/network restart</code></pre><h3 id="8-永久开启网卡混杂模式"><a href="#8-永久开启网卡混杂模式" class="headerlink" title="8. 永久开启网卡混杂模式"></a>8. 永久开启网卡混杂模式</h3><blockquote><p>重启网卡混杂模式会失效，需设为永久开启 修改/etc/network/interfaces文件：</p><p>谨慎操作，可能导致无法访问网络</p><p>添加 <code>up ip link set eth0 promisc on</code></p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589043064/hexo/promisc_tx2nev.png" alt="修改网卡接口配置"></p><h2 id="三、旁路网关配置"><a href="#三、旁路网关配置" class="headerlink" title="三、旁路网关配置"></a>三、旁路网关配置</h2><h3 id="1-登录旁路网关系统"><a href="#1-登录旁路网关系统" class="headerlink" title="1. 登录旁路网关系统"></a>1. 登录旁路网关系统</h3><blockquote><p>用户名 <code>root</code> 密码 <code>password</code></p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589041433/hexo/login_zgy4vg.png" alt="登录界面"></p><h3 id="2-更改系统主题"><a href="#2-更改系统主题" class="headerlink" title="2. 更改系统主题"></a>2. 更改系统主题</h3><blockquote><p>更改系统主题为<code>Argon-Dark</code></p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589043524/hexo/theme_es9ekm.png" alt="更改主题"></p><h3 id="3-更改上级路由"><a href="#3-更改上级路由" class="headerlink" title="3. 更改上级路由"></a>3. 更改上级路由</h3><blockquote><p>点击网络&gt;接口&gt;修改</p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589043893/hexo/lan_smvrcr.png" alt="进入LAN配置"></p><blockquote><p>修改IPv4网关为<code>10.10.10.1</code>,DHCP服务器 勾选 <code>忽略此接口</code></p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589044105/hexo/DHCP_bwtwdk.png" alt="修改上级路由"></p><h3 id="4-网络加速设置"><a href="#4-网络加速设置" class="headerlink" title="4. 网络加速设置"></a>4. 网络加速设置</h3><blockquote><p>开启DNS加速</p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589044491/hexo/ACC_s1tx1m.png" alt="更改主题"></p><h3 id="5-科学上网"><a href="#5-科学上网" class="headerlink" title="5. 科学上网"></a>5. 科学上网</h3><blockquote><p>开启科学上网</p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589044757/hexo/node_moj3rj.png" alt="添加节点"></p><blockquote><p>全局设置</p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589044938/hexo/passwall_gquzdn.png" alt="参数设置"></p><h3 id="6-配置旁路网关"><a href="#6-配置旁路网关" class="headerlink" title="6. 配置旁路网关"></a>6. 配置旁路网关</h3><blockquote><p>局域网中需要科学上网的机器配置旁路网关</p></blockquote><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589045268/hexo/IP_slznx9.png" alt="网关设置"></p><p><img src="https://res.cloudinary.com/baymax-tips/image/upload/v1589045677/hexo/youtube_lpmeny.png" alt="油管测速"></p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 旁路由 </tag>
            
            <tag> 透明网关 </tag>
            
            <tag> Docker </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/08/hello-world/"/>
      <url>/2020/05/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
